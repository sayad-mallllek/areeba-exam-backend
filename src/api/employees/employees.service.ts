import { Injectable } from '@nestjs/common';
import { PaginationDto } from 'src/common/dto/pagination.dto';
import { DatabaseService } from 'src/integrations/database/database.service';
import { CreateEmployeeDto } from './dto/create-employee.dto';
import { generateRandomHashPassword } from 'src/utils/auth.utils';
import { UpdateEmployeeDto } from './dto/update-employee-dto';
import { EmployeeResponseDto } from './dto/employee-response.dto';
import { plainToInstance } from 'class-transformer';

@Injectable()
export class EmployeesService {
  constructor(private readonly database: DatabaseService) {}

  async findAllEmployees(paginationDto: PaginationDto) {
    const { limit, offset } = paginationDto;
    const employees = await this.database.employee.findMany({
      take: limit,
      skip: offset,
      include: {
        address: true,
        user: true,
      },
    });

    return plainToInstance(EmployeeResponseDto, employees, {
      excludeExtraneousValues: true,
    });
  }

  async findEmployeeById(id: number) {
    const employee = await this.database.employee.findUnique({
      where: { id },
      include: {
        address: true,
        user: true,
      },
    });

    return employee
      ? plainToInstance(EmployeeResponseDto, employee, {
          excludeExtraneousValues: true,
        })
      : null;
  }

  async createEmployee(data: CreateEmployeeDto) {
    const {
      email,
      firstName,
      lastName,
      role,
      salary,
      hireDate,
      position,
      departmentId,
      branchId,
      city,
      country,
      state,
      street,
      zipCode,
    } = data;

    const { plain: autoGeneratedPassword, hash: autoGeneratedHashedPassword } =
      await generateRandomHashPassword();

    console.log('Auto-generated employee password:', autoGeneratedPassword);

    const employee = await this.database.employee.create({
      data: {
        salary,
        hireDate: hireDate ? new Date(hireDate) : undefined,
        position,
        department: {
          connect: { id: departmentId },
        },
        branch: { connect: { id: branchId } },
        address: {
          create: {
            street,
            city,
            state,
            zipCode,
            country,
          },
        },
        user: {
          create: {
            email,
            firstName,
            lastName,
            role,
            auths: {
              create: {
                password: autoGeneratedHashedPassword,
              },
            },
          },
        },
      },
      include: {
        address: true,
        user: true,
      },
    });

    return plainToInstance(EmployeeResponseDto, employee, {
      excludeExtraneousValues: true,
    });
  }

  async updateEmployee(id: number, data: UpdateEmployeeDto) {
    const {
      email,
      firstName,
      lastName,
      role,
      salary,
      hireDate,
      position,
      departmentId,
      branchId,
      city,
      country,
      state,
      street,
      zipCode,
    } = data;

    const employee = await this.database.employee.update({
      where: { id },
      data: {
        salary,
        hireDate,
        position,
        ...(departmentId !== undefined && {
          department: { connect: { id: departmentId } },
        }),
        ...(branchId !== undefined && {
          branch: { connect: { id: branchId } },
        }),
        user: {
          update: {
            email,
            firstName,
            lastName,
            role,
          },
        },
        address: {
          update: {
            city,
            country,
            state,
            street,
            zipCode,
          },
        },
      },
      include: {
        address: true,
        user: true,
      },
    });

    return plainToInstance(EmployeeResponseDto, employee, {
      excludeExtraneousValues: true,
    });
  }

  async deleteEmployee(id: number) {
    const employee = await this.database.employee.delete({
      where: { id },
      include: {
        address: true,
        user: true,
      },
    });

    return plainToInstance(EmployeeResponseDto, employee, {
      excludeExtraneousValues: true,
    });
  }
}
